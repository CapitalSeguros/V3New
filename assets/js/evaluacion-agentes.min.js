const baseUrl = $("#base_url").attr("data-base-url") + 'calificacionAgente';
//console.log(baseUrl);

$(document).ready(function() {
    $('#selectAnswer').change();
    getEvaluations();
    getCountResponseEvaluation();
    getQuestionsOfOpinion();
})

//document.getElementById('Crear').scrollIntoView();

function getEvaluations() {
    const email = document.getElementById('searchAgent').value;
    const month = document.getElementById('searchMonth').value;
    const year = document.getElementById('searchYear').value;
    $.ajax({
        type: "GET",
        url: `${baseUrl}/getCompleteInformationEvaluation`,
        data: {
            em: email,
            mt: month,
            yr: year,
            tp: 1
        },
        beforeSend: (load) => {
            $('#btnSearch').prop('disabled',true);
            $('#btnExportAnswer').prop('disabled',true);
            $('#contTableAnswers').html(`
                <div class="container-spinner-content-loading">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden"></span>
                    </div>
                    <p class="cr-cargando" style="font-size:18px;">Cargando...</p>
                </div>
            `);
        },
        success: (data) => {
            const resp = JSON.parse(data);
            console.log(resp);
            let rs = resp['result'][0];
            let gn = rs.generadas;
            let pg = rs.preguntas;
            var table = `<table class="table table-striped" id="TableAnswers"><thead class="table-thead"><tr class="table-tr"><th>N°</th><th>Nombre</th><th>Lugar</th><th>Motivo</th><th>Agente</th><th>Fecha</th>`;
            var colspan = 6;
            var num = 0;
            //Integrar preguntas
            for (a in pg) {
                colspan++;
                table += `<th>${pg[a].pregunta}</th>`;
            }
            table += `</tr></thead><tbody id="bodyTableAnswers">`;
            //Agregar datos
            for (b in gn) {
                num++;
                let an = gn[b].respuestas;
                var td = ``;
                var sucursal = "";
                for (c in pg) {
                    td += `<td>`;
                    if (pg[c].tipo_respuesta == 3) { td += `<ul style="padding-left: 20px;">`; }
                    for (d in an) {
                        if (an[d].id_pregunta == pg[c].id_pregunta) {
                            td += get_response_type(an[d].tipo_respuesta,an[d].respuesta,an[d].opcion,an[d].otros);
                        }
                    }
                    if (pg[c].tipo_respuesta == 3) { td += `</ul>`; }
                    td += `</td>`;
                }
                switch (gn[b].lugar) {
                    case '1': sucursal = "Mérida Buenavista"; break;
                    case '2': sucursal = "Mérida Norte"; break;
                    case '3': sucursal = "Cancún"; break;
                }
                table += `
                    <tr class="show-answers">
                        <td>${num}</td>
                        <td>${gn[b].nombre}</td>
                        <td>${sucursal}</td>
                        <td>${getTextValue(gn[b].motivo)}</td>
                        <td>${getTextValue(gn[b].agente_nombre)}</td>
                        <td>${getDateFormat(gn[b].fecha_creacion,1)}</td>
                        ${td}
                    </tr>
                `;
            }
            if (gn == 0) { table += `<tr><td colspan="${colspan}"><center><strong>Sin resultados</strong></center></td></tr>`; }
            table += `</tbody></table>`;
            //
            $('.export-answers[name="em"]').val(email);
            $('.export-answers[name="mt"]').val(month);
            $('.export-answers[name="yr"]').val(year);
            $('#contTableAnswers').html(table);
            $('#btnSearch').prop('disabled',false);
            $('#btnExportAnswer').prop('disabled',false);
        },
        error: (error) => {
            console.log(error);
            $('#btnSearch').prop('disabled',false);
        }
    })
}

function getCountResponseEvaluation() {
    const email = document.getElementById('searchAgentGraphic').value;
    const month = document.getElementById('searchMonthGraphic').value;
    const year = document.getElementById('searchYearGraphic').value;
    //console.log(email, month, year);
    $.ajax({
        type: "GET",
        url: `${baseUrl}/getCompleteInformationEvaluation`,
        data: {
            em: email,
            mt: month,
            yr: year,
            tp: 1
        },
        beforeSend: (load) => {
        },
        success: (data) => {
            const resp = JSON.parse(data);
            //console.log(resp);
            let rs = resp['result'][0];
            let gn = rs.generadas;
            let pg = rs.preguntas;
            let dataG = [];
            var ul = `<ul class="nav nav-tabs nav-light">`;
            var tab = ``;
            for (a in pg) {
                const active = (a == 0) ? "active" : "";
                var numQ = Number(a) + 1;
                let dd = [{[0]:pg[a].id_pregunta, [1]:pg[a].pregunta, [2]:pg[a].respuesta, [3]:pg[a].tipo_respuesta, [4]:pg[a].opciones, [5]:numQ, [6]:gn}];
                let draw = draw_tr_table_question(dd[0]);
                //console.log(draw);
                ul += `<li class="nav-item"><a class="nav-tab-link ${active}" aria-current="page" href="#Q${numQ}" role="tab" data-toggle="tab">Pregunta ${numQ}</a></li>`;
                tab += `<div class="col-md-12 tab-pane pd-left pd-right ${active}" id="Q${numQ}">${draw[0]}<div class="col-md-12 segment-table" id="QGraphic${numQ}" style="margin-bottom: 20px;"></div></div>`;
                dataG.push(draw[1]);
            }
            ul += `</ul>`;
            //console.log(dataG);
            $('#navTablesResponseGraphic').html(ul);
            $('#tabsTablesResponseGraphic').html(tab);
            for (let i=0;i<dataG.length;i++) {
                //console.log(dataG[i][0],dataG[i][1],dataG[i][2],dataG[i][3]);
                if (dataG[i][4] != "n") {
                    graphicLine(dataG[i][0],dataG[i][1],dataG[i][2],dataG[i][3]);
                }
            }
        },
        error: (error) => {
            console.log(error);
        }
    })
}

function getQuestionsOfOpinion() {
    $.ajax({
        type: "GET",
        url: `${baseUrl}/getCreatedQuestionsOfEvaluation`,
        data: { id: 1 },
        beforeSend: (load) => {
            $('#bodyTableQuestion').html(`
                <tr>
                    <td colspan="7">
                        <div class="container-spinner-content-loading">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden"></span>
                            </div>
                            <p class="cr-cargando" style="font-size:18px;">Cargando...</p>
                        </div>
                    </td>
                </tr>
            `);
        },
        success: (data) => {
            const r = JSON.parse(data);
            //console.log(r);
            var trtd = ``;
            if (r != 0) {
                for (const a in r) {
                    var response_type = "";
                    switch(r[a].tipo_respuesta) {
                        case '1': response_type = "Sí/No"; break;
                        case '2': response_type = "Opcional"; break;
                        case '3': response_type = "Selección"; break;
                        case '4': response_type = "Estrellas"; break;
                        case '5': response_type = "Respuesta Abierta"; break;
                    }
                    trtd += `
                        <tr class="show-question" data-id="${r[a].id_pregunta}">
                            <td>${Number(a) + 1}</td>
                            <td>${r[a].pregunta}</td>
                            <td><label class="label label-wine">${response_type}</label></td>
                            <td>${getDateFormat(r[a].fecha_creacion,1)}</td>
                            <td>${getDateFormat(r[a].fecha_modificado,1)}</td>
                            <td>
                                <button class="btn btn-primary edit-question" data-question="${r[a].id_pregunta}"><i class="fas fa-edit"></i> Editar</button>
                            </td>
                            <td>
                                <button class="btn btn-danger delete-question" onclick="delete_Question(${r[a].id_pregunta})"><i class="fas fa-trash-alt"></i> Eliminar</button>
                            </td>
                        </tr>
                    `;
                }
            }
            else { trtd = `<tr><td colspan="7"><center><strong>Sin resultados</strong></center></td></tr>`; }
            $('#bodyTableQuestion').html(trtd);
            $('.edit-question').click(function() {
                const id = $(this).data('question');
                for (const a in r) {
                    if (r[a].id_pregunta == id) {
                        $('input[name="update-question"][data-field="id"]').val(r[a].id_pregunta);
                        $('textarea[name="update-question"][data-field="pregunta"]').val(r[a].pregunta);
                        $('textarea[name="update-question"][data-field="pregunta"]').keyup();
                        $('select[name="update-question"][data-field="tipo"] option[value="'+r[a].tipo_respuesta+'"]').prop('selected',true);
                        $('select[name="update-question"][data-field="tipo"]').change();
                        // $('select[name="update-question"][data-field="respuesta"] option[value="'+r[a].respuesta+'"]').prop('selected',true);
                    }
                }
                //console.log(id);
                $(".edit-question-modal").modal({
                    show: true,
                    keyboard: true,
                    backdrop: false,
                })
            })
        },
        error: (error) => {
            console.log(error);
            $('#bodyTableQuestion').html(`<tr><td colspan="7"><center><strong>Sin resultados</strong></center></td></tr>`);
        }
    })
}

function getOptionsByQuestion(id,type) {
    $.ajax({
        type: "GET",
        url: `${baseUrl}/getOptionsByQuestion`,
        data: { id: id, tp: type },
        success: (data) => {
            const r = JSON.parse(data);
            //console.log(r);
            var option = "";
            for (const a in r) {
                option += `<option value="${r[a].id_opcion}">${r[a].titulo}</option>`;
            }
            if (r == 0) { option = `<option value="0">Ninguno</option>`; }
            $('#selectUpdateAnswer').html(option);
        },
        error: (error) => {
            console.log(error);
        }
    })
}

function getInformationAgent() {
    const email = document.getElementById('evAgent').value;
    $.ajax({
        type: "GET",
        url: `${baseUrl}/getInformationAgent`,
        data: { em: email },
        beforeSend: (load) => {
            $('#btnLink').prop('disabled',true);
            $('#btnExternalLink').attr('disabled',true);
        },
        success: (data) => {
            const r = JSON.parse(data);
            //console.log(r);
            let dd = (r != 0) ? r[0] : "";
            let clase = document.getElementsByClassName('info-agent');
            for (let i=0;i<clase.length;i++) {
                var count = i + 1;
                var text = "...";
                switch(count) {
                    case 1: text = getTextValue(dd.nombres) + " " + getTextValue(dd.apellidoPaterno) + " " + getTextValue(dd.apellidoMaterno);
                        break;
                    case 2: text = getTextValue(dd.email);
                        break;
                    case 3: text = getTextValue(dd.IDVend);
                        break;
                    case 4: text = getTextValue(dd.idpersonarankingagente);
                        break;
                    case 5: text = getTextValue(dd.canal.toUpperCase());
                        break;
                    case 6: text = getTextValue(dd.userEmailCreacion);
                        break;
                }
                $(clase[i]).text(text);
            }
            $('#evLink').val(`${baseUrl}/puntuacion?ag=${dd.idPersona}`);
            $('#btnExternalLink').prop('href',`${baseUrl}/puntuacion?ag=${dd.idPersona}`);
            $('#btnLink').prop('disabled',false);
            $('#btnExternalLink').attr('disabled',false);
        },
        error: (error) => {
            console.log(error);
        }
    })
}

function create_update_Question(action,name) {
    let input = document.getElementsByName(name);
    let insert = [];
    let empty = [];
    const btn = (action == 1) ? 'CrearPregunta' : 'ActualizarPregunta';
    const title_s = (action == 1) ? '¡Creado!' : '¡Actualizado!';
    const text_s = (action == 1) ? 'Pregunta creada exitósamente.' : 'Información de la pregunta actualizada.';
    var li = ``;
    for (let i=0;i<input.length;i++) {
        const field = $(input[i]).data('field');
        const val = input[i].value != 0 ? input[i].value : "";
        if (input[i].value != 0 || field == "respuesta") {
            insert.push(val);
        }
        else {
            if (field != "respuesta") {
                li += (li != 0) ? `, ` + $(input[i]).attr('title') : $(input[i]).attr('title');
                empty.push($(input[i]).attr('title'));
            }
        }
    }
    console.log(empty);
    if (empty != 0) {
        swal('¡Espera!', 'Parece que los siguientes campos están vacíos: '+li, 'warning');
    }
    else {
        //console.log(insert);
        $.ajax({
            type: "POST",
            url: `${baseUrl}/insertDataForCreateQuestion`,
            data: {
                ac: action,
                in: insert
            },
            beforeSend: (load) => {
                $('#btn'+btn).html(`
                    <div class="container-spinner-btn-loading">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden"></span>
                        </div>
                    </div>
                `);
            },
            success: (data) => {
                const r = JSON.parse(data);
                //console.log(r);
                $('#btn'+btn).html(`<i class="fas fa-save"></i> Guardar`);
                swal(title_s, text_s, 'success');
                getQuestionsOfOpinion();
            },
            error: (error) => {
                console.log(error);
                $('#btn'+btn).html(`<i class="fas fa-save"></i> Guardar`);
                swal('¡Uups!', 'Hay problemas al intentar guardar la información.', 'error');
            }
        })
    }
}

function create_option_Question(id) {
    const val = document.getElementsByName('create-option')[0].value;
    const resp = document.getElementsByName('create-option')[1];
    const type = $('select[name="update-question"][data-field="tipo"]').val();
    var type_op = type == 2 ? 0 : 1;
    var check = resp.checked ? 1 : 0;
    //console.log(id, val, type);
    if (val != 0) {
        $.ajax({
            type: "POST",
            url: `${baseUrl}/insertOptionsByQuestion`,
            data: {
                id: id,
                tx: val,
                tp: type_op,
                ck: check
            },
            beforeSend: (load) => {
                $('#btnAddOption').html(`
                    <div class="container-spinner-btn-loading" style="padding: 0px;">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden"></span>
                        </div>
                    </div>
                `);
            },
            success: (data) => {
                const r = JSON.parse(data);
                //console.log(r);
                $('#btnAddOption').html(`<i class="fas fa-plus"></i>`);
                getOptionsByQuestion(id,type_op);
            },
            error: (error) => {
                console.log(error);
            }
        })
    }
}

function delete_Question(id) {
    swal({
        title: "¿Desea eliminarlo?",
        text: "La pregunta se eliminará de la evaluación permanentemente.",
        icon: "warning",
        buttons: ["Cancelar", "Aceptar"],
    }).then((value) => {
        if (value) {
            //console.log(id, val);
            $.ajax({
                type: "POST",
                url: `${baseUrl}/deleteQuestion`,
                data: {
                    id: id
                },
                beforeSend: (load) => {
                },
                success: (data) => {
                    const r = JSON.parse(data);
                    //console.log(r);
                    if (r['status'] == true) {
                        swal("¡Eliminado!", "Pregunta eliminada con éxito.", "success");
                        getQuestionsOfOpinion();
                    }
                },
                error: (error) => {
                    console.log(error);
                    swal("¡Vaya!", "Hay conflicto al intentar eliminar.", "error");
                }
            })
        }
    })
}

function get_response_type(type,response,option,others) {
    var answer = response;
    switch(type) {
        case '1': answer = (response == "Y") ? "Sí" : "No";
        break;
        case '2': if (option[0].respuesta == '1') { answer += ': ' + others; }
        break;
        case '3':
            answer = `<li><p class="mg-cero">${option[0].titulo}`;
            if (option[0].respuesta == '1') { answer += ': ' + others; }
            answer += `</p></li>`;
        break;
        case '4': answer = response + " Estrellas";
        break;
    }
    return answer;
}

function input_type_option(type,action) {
    const id = (action == "update") ? $('input[name="update-question"][data-field="id"]').val() : 0;
    //var div = `<label class="textForm">Respuesta Correcta (Solo si lo requiere):</label>`;
    var div = ``;
    var example = ``;
    var container = ``;
    var type_option = "";
    switch(type) {
        case '1':
            //div += `<select class="form-control" name="${action}-question" title="Respuesta" data-field="respuesta"><option value="0">Ninguno</option><option value="Y">Sí</option><option value="N">No</option></select>`;
            
            example = `
                <div class="form-check column-flex-center-center">
                    <input type="radio" class="form-check-input" name="example" value="1">
                    <label class="form-check-label">Sí</label>
                </div>
                <div class="form-check column-flex-center-center">
                    <input type="radio" class="form-check-input" name="example" value="2">
                    <label class="form-check-label">No</label>
                </div>
            `;
        break;
        case '2':
            var text = (action == "create") ? `Para utilizar este tipo de respuesta y crear una <b>opción</b> primero debes guardar la pregunta. Las <i>opciones</i> se crean con el botón <b><i class="fas fa-edit"></i> Editar</b> de la tabla de abajo.` : `Para agregar una opción para respuesta solo debes crearlo en <b>Agregar Opción</b>`;
            div = `<label class="textForm">Crea una opción:</label><br><label class="mg-cero" style="font-size: 13px;">${text}</label>`;
            type_option = 0;

            for (let i=0;i<4;i++) {
                example += `
                    <div class="form-check column-flex-center-center">
                        <input type="radio" class="form-check-input" name="example" value="${i + 1}">
                        <label class="form-check-label">Opción ${i + 1}</label>
                    </div>
                `;
            }

            if (action == "update") {
                container = `
                    <div class="col-md-6 pd-left">
                        <label class="textForm">Agregar Opción:</label>
                        <div class="column-flex-center-start pd-items-table">
                            <input type="text" class="form-control" name="create-option">
                            <button class="btn btn-primary btn-add mg-left" id="btnAddOption" title="Guardar opción" onclick="create_option_Question(${id})"><i class="fas fa-plus"></i></button>
                        </div>
                        <div class="form-check column-flex-center-start pd-left mg-top">
                            <label class="form-check-label">* Respuesta abierta</label>
                            <input type="checkbox" class="form-check-input" name="create-option">
                        </div>
                    </div>
                    <div class="col-md-6 pd-right">
                        <!-- <label class="textForm">Respuesta Correcta (Solo si lo requiere):</label>
                        <select class="form-control" id="selectUpdateAnswer" name="update-question" title="Respuesta" data-field="respuesta"></select> -->

                        <label class="textForm">Opciones creadas para esta pregunta</label>
                        <select class="form-control" id="selectUpdateAnswer"></select>
                    </div>
                `;
            }
        break;
        case '3':
            var text = (action == "create") ? `Para utilizar este tipo de respuesta y crear una <b>opción</b> primero debes guardar la pregunta. Las <i>opciones</i> se crean con el botón <b><i class="fas fa-edit"></i> Editar</b> de la tabla de abajo.` : `Para agregar una opción para respuesta solo debes crearlo en <b>Agregar Opción</b>`;
            div = `<label class="textForm">Crea una opción:</label><br><label class="mg-cero" style="font-size: 13px;">${text}</label>`;
            type_option = 1;

            for (let i=0;i<4;i++) {
                example += `
                    <div class="form-check column-flex-center-center">
                        <input type="checkbox" class="form-check-input" name="example" value="${i + 1}">
                        <label class="form-check-label">Opción ${i + 1}</label>
                    </div>
                `;
            }

            if (action == "update") {
                container = `
                    <div class="col-md-6 pd-left">
                        <label class="textForm">Agregar Opción:</label>
                        <div class="column-flex-center-start">
                            <input type="text" class="form-control" name="create-option">
                            <button class="btn btn-primary btn-add mg-left" id="btnAddOption" title="Guardar opción" onclick="create_option_Question(${id})"><i class="fas fa-plus"></i></button>
                        </div>
                        <div class="form-check column-flex-center-start pd-left mg-top">
                            <label class="form-check-label">* Respuesta abierta</label>
                            <input type="checkbox" class="form-check-input" name="create-option">
                        </div>
                    </div>
                    <div class="col-md-6 pd-right">
                        <!-- <label class="textForm">Respuesta Correcta (Solo si lo requiere):</label>
                        <select class="form-control" id="selectUpdateAnswer" name="update-question" title="Respuesta" data-field="respuesta"></select> -->

                        <label class="textForm">Opciones creadas para esta pregunta</label>
                        <select class="form-control" id="selectUpdateAnswer"></select>
                    </div>
                `;
            }
        break;
        case '4':
            var p = ``;
            for (let i=0;i<5;i++) {
                p += `
                    <input type="radio" id="star${i + 1}-example" name="example" value="${5 - i}">
                    <label for="star${i + 1}-example"><i class="fas fa-star icon-star"></i></label>
                `;
            }
            example = `<p class="container-stars">${p}</p>`;
        break;
        case '5':
            //div += `<input type="text" class="form-control" name="${action}-question" title="Respuesta" data-field="respuesta" placeholder="No requiere de una respuesta específica.">`;
            example = `<input type="type" class="form-control" placeholder="Escribe tu respuesta.">`;
        break;
    }
    if (action == "create") {
        $('#contAnswer').html(div);
        $('#contAnswerExample').html(example);
    }
    else {
        $('#contUpdateAnswer').html(div);
        $('#contOption').html(container);
        getOptionsByQuestion(id,type_option);
    }
}

function draw_tr_table_question(r) {
    let op = r[4];
    let rs = r[6];
    let options = [];
    let response = [];
    let graphic = [];
    let add = {};
    var div = `<div class="col-md-12 segment-table" style="margin-bottom: 20px;"><div class="col-md-12 container-table table-graphic" style="height: auto;">`;
    var colspan = 0;
    var approved = "y";
    var th = ``;
    var tr = ``;
    var td = ``;
    //thead
    switch(r[3]) {
        case '1':
            let opt = [{[0]:"Sí", [1]:"No"}][0];
            for (let i=0;i<2;i++) { const val = opt[i]; options.push(val); count++; }
            break;
        case '2':
            for (a in op) { const val = op[a].titulo; options.push(val); count++; }
            break;
        case '3':
            for (a in op) { const val = op[a].titulo; options.push(val); count++; }                
            break;
        case '4':
            for (let i=0;i<5;i++) { const val = i + 1; options.push(val); count++; }
            break;
        case '5':
            approved = "n"; options.push("Respuesta"); count++;
            break;
    }
    //console.log(r);
    //td -> count
    for (let i=0;i<options.length;i++) {
        var count = r[3] != 5 ? 0 : "";
        th += `<th class="title-table">${options[i]}</th>`;
        for (a in rs) {
            rs[a].respuestas.forEach((e) => {
                if (e.id_pregunta == r[0]) {
                    switch(e.tipo_respuesta) {
                        case '1':
                            switch(e.respuesta) {
                                case 'Y': if (options[i] == "Sí") { count++; } break;
                                case 'N': if (options[i] == "No") { count++; } break;
                            }
                            break;
                        case '2': if (e.opcion[0].titulo == options[i]) { count++; }
                            break;
                        case '3': if (e.opcion[0].titulo == options[i]) { count++; }
                            break;
                        case '4': if (e.respuesta == options[i]) { count++; }
                            break;
                        case '5': 
                            count += `<tr><td><center><strong>${e.respuesta}</strong></center></td></tr>`;
                            break;
                    }
                }
            })
        }
        if (r[3] != 5) {
            td += `<td><center><strong>${count}</strong></center></td>`;
        }
        else {
            td += count;
        }
        
        response.push(count);
    }
    tr = r[3] != 5 ? `<tr>${td}</tr>` : td;
    // Insert Data Graphic
    add[0] = options;
    add[1] = response;
    add[2] = "Resultados";
    add[3] = `QGraphic${r[5]}`;
    add[4] = approved;
    graphic.push(add);
    //console.log(graphic);
    //table
    div += `<table class="table table-striped" id="TableQ${r[5]}"><thead class="table-thead"><tr class="tr-style"><th colspan="${options.length}" class="title-table">${r[1]}</th></tr><tr class="tr-style">${th}</tr></thead><tbody>${tr}</tbody></table>`;
    div += `</div></div>`;
    //Data
    let data = [{[0]:div, [1]:graphic[0]}][0];
    //console.log(data);
    return data;
}

//-------------------------------------------------------------------------------------------

function graphicLine(datax,datay,titleG,graphic) {
    var options = {
        series: [{
            name: 'Respuestas',
            data: datay
        }],
        chart: {
            height: 350,
            type: 'area'
        },
        colors: ['#3E40B5', '#3EB1B5'],
        title: {
            text: titleG
        },
        dataLabels: {
            enabled: false
        },
        stroke: {
            curve: 'smooth'
        },
        xaxis: {
            //type: 'datetime',
            categories: datax,
            labels: {
              rotate: -45,
              rotateAlways: true,
              //hideOverlappingLabels: true,
              trim: true,
              maxHeight: 150, //Height contenedor de las categorías
            },
        },
        yaxis: {
            title: {
              text: 'Personas',
            },
        },
        /*tooltip: {
            x: {
              format: 'dd/MM/yy HH:mm'
            },
        },*/
    };
    $('#'+graphic).html("");
    var chart = new ApexCharts(document.querySelector("#"+graphic), options);
    chart.render();
}